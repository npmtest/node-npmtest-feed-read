{"/home/travis/build/npmtest/node-npmtest-feed-read/test.js":"/* istanbul instrument in package npmtest_feed_read */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-feed-read/lib.npmtest_feed_read.js":"/* istanbul instrument in package npmtest_feed_read */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_feed_read = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_feed_read = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-feed-read/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-feed-read && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_feed_read */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_feed_read\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_feed_read.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_feed_read.rollup.js'] =\n            local.assetsDict['/assets.npmtest_feed_read.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_feed_read.__dirname + '/lib.npmtest_feed_read.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-feed-read/node_modules/feed-read/index.js":"var request    = require('request')\n  , sax        = require('sax')\n  , _          = require('underscore');\n\n\n// Public: Fetch the articles from the RSS or ATOM feed.\n// \n// url      - The String feed url, or an Array of urls.\n// callback - Receives `(err, articles)`, where each article has properties:\n//          \n//              * \"title\"\n//              * \"author\"\n//              * \"link\"\n//              * \"content\"\n//              * \"published\"\n//              * \"feed\" - {name, source, link}\n// \n// Returns nothing.\nvar FeedRead = module.exports = function(feed_url, callback) {\n  if (feed_url instanceof Array) {\n    var feed_urls = feed_url\n      , articles  = [];\n    var next = function(i) {\n      var feed_url = feed_urls[i];\n      if (!feed_url) return callback(null, articles);\n      FeedRead.get(feed_url, function(err, _articles) {\n        if (err) return callback(err);\n        articles = articles.concat(_articles);\n        next(i + 1);\n      });\n    };\n    next(0);\n  } else {\n    FeedRead.get(feed_url, callback);\n  }\n};\n\n\n// Public: Check if the XML is RSS, ATOM, or neither.\n// \n// xml - A String of XML.\n// \n// Returns \"atom\", \"rss\", or false when it is neither.\nFeedRead.identify = function(xml) {\n  if (/<rss /i.test(xml)) {\n    return \"rss\";\n  } else if (/<feed /i.test(xml)) {\n    return \"atom\";\n  } else {\n    return false;\n  }\n}\n\n\n\n// Internal: Get a single feed.\n// \n// feed_url - String url.\n// callback - Receives `(err, articles)`.\n// \nFeedRead.get = function(feed_url, callback) {\n  request(feed_url, function(err, res, body) {\n    if (err) return callback(err);\n    var type = FeedRead.identify(body);\n    if (type == \"atom\") {\n      FeedRead.atom(body, feed_url, callback);\n    } else if (type == \"rss\") {\n      FeedRead.rss(body, feed_url, callback);\n    } else {\n      return callback(new Error( \"Body is not RSS or ATOM\"\n                                , body.substr(0, 30), \"...\"));\n    }\n  });\n};\n\n\n\n// Public: Parse the articles from some ATOM.\n// \n// xml      - A XML String.\n// source   - (optional)\n// callback - Receives `(err, articles)`.\n// \n// Returns an Array of Articles.\nFeedRead.atom = function(xml, source, callback) {\n  if (!callback) return FeedRead.atom(xml, \"\", source);\n  \n  var parser   = new FeedParser()\n    , articles = []\n    // Info about the feed itself, not an article.\n    , meta     = {source: source}\n    // The current article.\n    , article\n    // The author for when no author is specified for the post.\n    , default_author;\n  \n  \n  parser.onopentag = function(tag) {\n    if (tag.name == \"entry\") article = tag;\n  };\n  \n  parser.onclosetag = function(tagname, current_tag) {\n    if (tagname == \"entry\") {\n      articles.push(article);\n      article = null;\n    } else if (tagname == \"author\" && !article) {\n      default_author = child_data(current_tag, \"name\");\n    } else if (tagname == \"link\" && current_tag.attributes.rel != \"self\") {\n      meta.link || (meta.link = current_tag.attributes.href);\n    } else if (tagname == \"title\" && !current_tag.parent.parent) {\n      meta.name = current_tag.children[0];\n    }\n  };\n  \n  parser.onend = function() {\n    callback(null, _.map(articles,\n      function(art) {\n        var author = child_by_name(art, \"author\");\n        if (author) author = child_data(author, \"name\");\n        \n        var obj = {\n            title:     child_data(art, \"title\")\n          , content:   child_data(art, \"content\")\n          , published: child_data(art, \"published\")\n                    || child_data(art, \"updated\")\n          , author:    author || default_author\n          , link:      child_by_name(art, \"link\").attributes.href\n          , feed:      meta\n          };\n        if (obj.published) obj.published = new Date(obj.published);\n        return obj;\n      }\n    ));\n  };\n  \n  parser.write(xml);\n};\n\n\n// Public: Parse the articles from some RSS.\n// \n// xml      - A XML String.\n// source   - (optional)\n// callback - Receives `(err, articles)`.\n// \n// Returns an Array of Articles.\nFeedRead.rss = function(xml, source, callback) {\n  if (!callback) return FeedRead.rss(xml, \"\", source);\n  \n  var parser   = new FeedParser()\n    , articles = []\n    // Info about the feed itself, not an article.\n    , meta     = {source: source}\n    // The current article.\n    , article;\n  \n  \n  parser.onopentag = function(tag) {\n    if (tag.name == \"item\") article = tag;\n  };\n  \n  parser.onclosetag = function(tagname, current_tag) {\n    if (tagname == \"item\") {\n      articles.push(article);\n      article = null;\n    } else if (tagname == \"channel\") {\n      meta.link || (meta.link = child_data(current_tag, \"link\"));\n      meta.name = child_data(current_tag, \"title\");\n    }\n  };\n  \n  parser.onend = function() {\n    callback(null, _.map(articles,\n      function(art) {\n        var obj = {\n            title:     child_data(art, \"title\")\n          , content:   scrub_html(child_data(art, \"content:encoded\"))\n                    || scrub_html(child_data(art, \"description\"))\n          , published: child_data(art, \"pubDate\")\n          , author:    child_data(art, \"author\")\n                    || child_data(art, \"dc:creator\")\n          , link:      child_data(art, \"link\")\n          , feed:      meta\n          };\n        if (obj.published) obj.published = new Date(obj.published);\n        return obj;\n      }\n    ));\n  };\n  \n  parser.write(xml);\n};\n\n\n// Methods to override:\n// \n//   * onopentag\n//   * onclosetag\n//   * onend\n// \nvar FeedParser = (function() {\n  // Internal: Parse the XML.\n  // \n  // xml      - An XML String.\n  // callback - Receives `(err, obj)`.\n  // \n  function FeedParser() {\n    this.current_tag = null;\n    var parser       = this.parser = sax.parser(true,\n        { trim: true\n        , normalize: true\n        })\n      , _this        = this;\n    \n    parser.onopentag  = function(tag) { _this.open(tag); };\n    parser.onclosetag = function(tag) { _this.close(tag); };\n    \n    parser.ontext  = function(text) { _this.ontext(text); };\n    parser.oncdata = function(text) { _this.ontext(text); };\n    parser.onend   = function() { _this.onend(); };\n    \n    parser.onerror = console.error;\n  }\n  \n  \n  // Public: Parse the XML.\n  FeedParser.prototype.write = function(xml) {\n    this.parser.write(xml).close();\n  };\n  \n  // Internal: Open a tag.\n  FeedParser.prototype.open = function(tag) {\n    tag.parent   = this.current_tag;\n    tag.children = [];\n    if (tag.parent) tag.parent.children.push(tag);\n    this.current_tag = tag;\n    this.onopentag(tag);\n  };\n  \n  // Internal: CLose a tag.\n  FeedParser.prototype.close = function(tagname) {\n    this.onclosetag(tagname, this.current_tag);\n    if (this.current_tag && this.current_tag.parent) {\n      var p = this.current_tag.parent;\n      delete this.current_tag.parent;\n      this.current_tag = p;\n    }\n  };\n  \n  // Internal: Add the text as a child of the current tag.\n  FeedParser.prototype.ontext = function(text) {\n    if (this.current_tag) {\n      this.current_tag.children.push(text);\n    }\n  };\n  \n  return FeedParser;\n})();\n\n\n// Internal: Remove <script> tags from the HTML.\n// \n// html     - An HTML String.\n// callback - Receives `(err, html)`.\n// \n// TODO: Do actual HTML parsing!!\nfunction scrub_html(html) {\n  return html.replace(/<script.*<\\/script>/gi, \"\");\n}\n\n\n// Internal: Find the first node from the parent node's children that has\n// the given name.\n// \n// parent - An Array of node objects.\n// name   - String node name.\n// \n// Returns a node Object or null.\nfunction child_by_name(parent, name) {\n  var children = parent.children || [];\n  for (var i = 0; i < children.length; i++) {\n    if (children[i].name == name) return children[i];\n  }\n  return null;\n}\n\n// Internal: Get the first child of `parent` with `name`,\n// and return the text of its children.\nfunction child_data(parent, name) {\n  var node     = child_by_name(parent, name)\n  if (!node) return \"\";\n  var children = node.children;\n  if (!children.length) return \"\";\n  return children.join(\"\");\n}\n"}